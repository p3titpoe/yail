from dataclasses import dataclass
from enum import Enum

class LoggerLevel(Enum):
    INHERIT = 0
    DEBUG = 10
    INFO = 20
    WARNING = 30
    ERROR = 40
    CRITICAL = 50

@dataclass
class LoggerMessage:
    sender: str
    log_level: LoggerLevel
    msg: str
    def __init__(self, sender, log_level, msg) -> None: ...

@dataclass(repr=False)
class BaseData:
    @property
    def keypairs(self) -> dict: ...
    def init_from_db(self, db_res: dict) -> None: ...
    def save(self) -> dict: ...

@dataclass(repr=False)
class Registry:
    max_len: int = ...
    def __post_init__(self) -> None: ...
    def reset_cache(self) -> bool: ...
    def hook_on_makelists(self) -> any: ...
    @property
    def booked(self) -> list[int]: ...
    @property
    def free(self) -> list[int]: ...
    @property
    def registry(self) -> dict: ...
    def register(self, element: any) -> int: ...
    def __init__(self, max_len=..., _cache=...) -> None: ...

@dataclass(repr=False)
class LoggerCache(Registry):
    def register(self, log_msg: LoggerMessage) -> int: ...
    def cache_entry(self, reg_id: int) -> LoggerMessage: ...
    def flush(self, to_screen: bool = False) -> list: ...
    max_len = ...
    def resize(self, new_size: int) -> list: ...
    @dataclass
    class LoggerLogParameters:
        loglevel: LoggerLevel
        qual_name: str = ...
        function_name: str = ...
        def __init__(self, loglevel, qual_name=..., function_name=...) -> None: ...
    def __init__(self, max_len=..., _cache=...) -> None: ...

@dataclass
class LoggerCacheline:
    logger: object
    name: str = ...
    log_level: LoggerLevel = ...
    cache: LoggerCache = ...
    def __post_init__(self) -> None: ...
    def __init__(self, logger, name=..., log_level=..., cache=...) -> None: ...

@dataclass
class MasterLoggerCache(LoggerCache):
    @property
    def logger_by_name(self) -> list: ...
    def register(self, logger): ...
    def hook_on_makelists(self) -> str: ...
    def cache_entry(self, reg_id) -> LoggerCacheline: ...
    def cache_entry_by_name(self, name: str) -> LoggerCacheline: ...
    def __init__(self, max_len=..., _cache=...) -> None: ...
