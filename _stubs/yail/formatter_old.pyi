import inspect
from _typeshed import Incomplete
from dataclasses import dataclass
from enum import Enum
from yail.logic import LoggerLevel as LoggerLevel, Registry as Registry

def iso_date(dummy: str) -> str: ...
def today(dummy: str) -> str: ...
def package(tosplit: inspect.FrameInfo) -> str: ...
def moduul(data: inspect.FrameInfo) -> str: ...
def klass(tosplit: inspect.FrameInfo) -> str: ...
def func(data: inspect.FrameInfo, showargs: bool = False, showargsval: bool = False) -> str: ...
def func_args(data: inspect.FrameInfo) -> str: ...
def func_argsval(data: inspect.FrameInfo) -> str: ...
def msg(inp: str) -> str: ...
def data2str(data: any) -> str: ...
def loglevel2str(data: LoggerLevel) -> str: ...
def loglevel2val(data: LoggerLevel) -> str: ...
def lineno(data: inspect.FrameInfo) -> str: ...

class FormTags(Enum):
    ISODATE = iso_date
    TODAY = today
    PACKAGE = package
    MODULE = moduul
    CLASS = klass
    FUNCTION = func
    FUNCTION_ARGS = func_args
    FUNCTION_ARGSVAL = func_argsval
    MSG = msg
    DATA = data2str
    LOGLEVEL = loglevel2str
    LOGLEVEL_NAME = loglevel2str
    LOGLEVEL_VALUE = loglevel2val
    LINENO = lineno
    @classmethod
    def by_name(cls, name: str): ...

def replace_tag_in_format(form: str, tag: str, repl: str) -> str: ...
def replace_taglist_in_format(form: str, data: dict) -> str: ...
def get_tags(form: str) -> list: ...

ccc: str

@dataclass
class FormatterTag:
    name: str
    replace: str = ...
    align: str = ...
    cnt: int = ...
    def __post_init__(self) -> None: ...
    @property
    def fmt(self) -> str: ...
    @property
    def column_width(self) -> int: ...
    def set_column_width(self, width: int) -> None: ...
    def set_fmt(self, fmt: str) -> None: ...
    def compile(self) -> str: ...
    def __init__(self, name, replace=..., align=..., _column_width=..., _fixed=..., _fmt=..., _is_to_long=..., _filler_len=..., cnt=...) -> None: ...

@dataclass
class FormatterConfig:
    module_separator: str = ...
    columns_separator: str = ...
    default_active: str = ...
    default_short: str = ...
    default_long: str = ...
    log_debug: str = ...
    log_info: str = ...
    log_warning: str = ...
    log_error: str = ...
    log_critical: str = ...
    log_fatal: str = ...
    def __post_init__(self) -> None: ...
    @property
    def package_members(self) -> list: ...
    def __init__(self, module_separator=..., columns_separator=..., default_active=..., default_short=..., default_long=..., log_debug=..., log_info=..., log_warning=..., log_error=..., log_critical=..., log_fatal=...) -> None: ...

@dataclass
class Formatter:
    logger_name: str
    def __post_init__(self) -> None: ...
    @property
    def format(self) -> str: ...
    def toggle_short_format(self) -> str: ...
    def toggle_data(self) -> bool: ...
    def seek_and_replace_taglist_in_format(self, form: str, data: dict) -> str: ...
    def get_tags(self, form: str = None) -> list: ...
    def replace_format(self, which: str, fmt: str) -> None: ...
    def compile_new(self, msg: str, frame: any, loglevel: LoggerLevel, data: Incomplete | None = None) -> str: ...
    def compile(self, msg: str, frame: any, loglevel: LoggerLevel, data: Incomplete | None = None) -> str: ...
    def __init__(self, logger_name, _conf=..., _active_format=..., _format_short=..., _format_long=..., _tags=..., _short=..., _show_data=...) -> None: ...
