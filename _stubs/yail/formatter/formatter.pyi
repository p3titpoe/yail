from .formatter_func import *
from _typeshed import Incomplete
from dataclasses import dataclass
from datetime import datetime as datetime
from enum import Enum
from importlib import import_module as import_module
from yail.logic import LoggerLevel as LoggerLevel, Registry as Registry

class FormTags(Enum):
    DATE = date_func
    PACKAGE = package_func
    MSG = msg_func
    DATA = data_func
    LOGLEVEL = loglevel_func
    LINENO = lineno_func
    LOGGER = logger_func
    @classmethod
    def by_name(cls, name: str): ...

def get_tags_old(form: str) -> list: ...

@dataclass
class FormatterTag:
    name: str
    replace: str = ...
    column_align: str = ...
    cnt: int = ...
    def __post_init__(self) -> None: ...
    @property
    def fmt(self) -> str: ...
    @property
    def column_width(self) -> int: ...
    def set_column_width(self, width: int) -> None: ...
    def set_fmt(self, fmt: str) -> None: ...
    def compile(self) -> str: ...
    def __init__(self, name, replace=..., column_align=..., _column_width=..., _fixed=..., _fmt=..., _is_to_long=..., _filler_len=..., cnt=...) -> None: ...

@dataclass
class FormatterTagStruct:
    formtag: str = ...
    column_width: str = ...
    column_align: str = ...
    args: list = ...
    def __post_init__(self) -> None: ...
    def __init__(self, formtag=..., column_width=..., column_align=...) -> None: ...

@dataclass
class FormatterConfig:
    columns_separator: str = ...
    def __post_init__(self) -> None: ...
    @property
    def default_long(self) -> list[FormatterTagStruct]: ...
    @default_long.setter
    def default_long(self, value: str) -> None: ...
    @property
    def default_short(self) -> list[FormatterTagStruct]: ...
    @default_short.setter
    def default_short(self, value) -> None: ...
    @property
    def default_active(self) -> list[FormatterTagStruct]: ...
    @default_active.setter
    def default_active(self, value) -> None: ...
    @property
    def log_debug(self) -> list[FormatterTagStruct]: ...
    @log_debug.setter
    def log_debug(self, value) -> None: ...
    @property
    def log_info(self) -> list[FormatterTagStruct]: ...
    @log_info.setter
    def log_info(self, value) -> None: ...
    @property
    def log_warning(self) -> list[FormatterTagStruct]: ...
    @log_warning.setter
    def log_warning(self, value) -> None: ...
    @property
    def log_error(self) -> list[FormatterTagStruct]: ...
    @log_error.setter
    def log_error(self, value) -> None: ...
    @property
    def log_critical(self) -> list[FormatterTagStruct]: ...
    @log_critical.setter
    def log_critical(self, value) -> None: ...
    @property
    def log_fatal(self) -> list[FormatterTagStruct]: ...
    @log_fatal.setter
    def log_fatal(self, value) -> None: ...
    @property
    def package_members(self) -> list: ...
    def toggle_short_format(self) -> str: ...
    def fmt_by_loglevel(self, loglevel: LoggerLevel): ...
    def use_custom_template(self, path_to_file: str) -> None: ...
    def __init__(self, columns_separator=..., _init_short=..., _init_long=..., _init_default_attr=..., _init_log_attr=..., _short=...) -> None: ...

@dataclass
class Formatter:
    logger_name: str
    def __post_init__(self) -> None: ...
    @property
    def format(self) -> str: ...
    @property
    def conf(self): ...
    def toggle_short_format(self) -> str: ...
    def toggle_data(self) -> bool: ...
    def get_tags(self, form: LoggerLevel = None) -> list: ...
    def replace_format(self, which: str, fmt: str) -> None: ...
    def compile(self, msg: str, frame: any, loglevel: LoggerLevel, data: Incomplete | None = None) -> str: ...
    def __init__(self, logger_name, _conf=..., _tags=..., _col_lens=...) -> None: ...

def make_tagconfs_from_confline(form: str) -> list[FormatterTagStruct]: ...
def tstfunc(): ...
